@using AuctionAce.Api.Models.ViewModels.Auctions
@model AuctionViewModel
@{
    string userIdString = Context.Session.GetString("UserId");
    int userId = 0;
    if (!string.IsNullOrEmpty(userIdString) && int.TryParse(userIdString, out userId))
    {
        Layout = "~/Views/Shared/_LayoutLogged.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_LayoutUnlogged.cshtml";
    }
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12 mb-3">
            <div class="btn-group" role="group" id="button-group">
                <button id="show-active" class="btn btn-success">Show Active</button>
                <button id="show-inactive" class="btn btn-danger">Show Inactive</button>
                <button id="show-pending" class="btn btn-secondary">Show Pending</button>
                <button id="show-all" class="btn btn-light">Show All</button>
            </div>
        </div>
    </div>

    <div class="row" id="auction-container">
        @if (Model.AuctionStatus != null)
        {
            foreach (var item in Model.AuctionStatus)
            {
                <div class="col-md-3 mb-4 card-wrapper" data-startdate="@item.StartDate.ToString("o")" data-status="@item.Status" data-enddate="@item.EndDate.ToString("o")">
                    <div class="card position-relative custom-card-width">
                        @if (item.AllAuctionsPhotos != null && item.AllAuctionsPhotos.AuctionImages != null && item.AllAuctionsPhotos.AuctionImages.Count > 0)
                        {
                            var firstImage = item.AllAuctionsPhotos.AuctionImages.First();
                            <img class="card-img-top img-thumbnail fixed-size" src="data:image/png;base64,@firstImage.AuctionImageBase64" alt="Card image cap" style="height:15rem" data-bs-toggle="modal" data-bs-target="#carouselModal-@item.Id">
                        }
                        else
                        {
                            <img class="card-img-top" src="path/to/default/image.png" alt="No image available">
                        }
                        <div class="card-body">
                            @if (item.AuctionName.Length > 27)
                            {

                                <h5 class="card-title">@item.AuctionName.Substring(0, 24)...</h5>

                            }
                            else
                            {
                                <h5 class="card-title">@item.AuctionName</h5>
                            }

                            @if (item.Description.Length > 48)
                            {
                                <p class="card-text">@item.Description.Substring(0, 45)...</p>
                            }
                            else
                            {
                                <p class="card-text">@item.Description</p>
                            }
                            <p class="card-time" id="timer-@item.Id"></p>
                            <a href="@Url.Action("AuctionItemList", "Auction", new { auctionId = item.Id })" class="btn btn-primary">View Auction Details</a>
                        </div>
                        <div class="like-container">
                            <span class="like-icon" data-auction-id="@item.Id" onclick="heartClick()">&#9829;</span> <!-- Serduszko -->
                        </div>
                        <div class="status-bubble">
                            @* Status will be added dynamically *@
                        </div>
                    </div>

                    <!-- Modal z carousel -->
                    <div class="modal fade" id="carouselModal-@item.Id" tabindex="-1" aria-labelledby="carouselModalLabel-@item.Id" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered modal-lg">
                            <div class="modal-content">
                                <div class="modal-body">
                                    <div id="carousel-@item.Id" class="carousel slide" data-bs-ride="carousel">
                                        <div class="carousel-inner">
                                            @for (int i = 0; i < item.AllAuctionsPhotos.AuctionImages.Count; i++)
                                            {
                                                var image = item.AllAuctionsPhotos.AuctionImages[i];
                                                <div class="carousel-item @(i == 0 ? "active" : "")">
                                                    <img class="d-block w-100" src="data:image/png;base64,@image.AuctionImageBase64" alt="Image @i">
                                                </div>
                                            }
                                        </div>
                                        <a class="carousel-control-prev" href="#carousel-@item.Id" role="button" data-bs-slide="prev">
                                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                            <span class="visually-hidden">Previous</span>
                                        </a>
                                        <a class="carousel-control-next" href="#carousel-@item.Id" role="button" data-bs-slide="next">
                                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                            <span class="visually-hidden">Next</span>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            }
        }

    </div>

</div>

<style>
    .fixed-size {
        height: 200px;
        object-fit: cover;
    }

    .position-relative {
        position: relative;
    }

    .card-wrapper {
        display: block; /* Ensure all cards are visible by default */
    }

    .status-bubble {
        position: absolute;
        top: 10px;
        right: 10px;
        padding: 8px 12px;
        border-radius: 12px;
        color: white;
        font-weight: bold;
        text-align: center;
        font-size: 0.9rem;
        background: rgba(0, 0, 0, 0.7);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: background 0.3s ease;
    }

    .status-open {
        background-color: #28a745; /* Green */
    }

    .status-closed {
        background-color: #dc3545; /* Red */
    }

    .status-pending {
        background-color: #6c757d; /* Gray */
    }

    .status-default {
        background-color: #007bff; /* Blue */
    }

    .like-container {
        position: absolute;
        top: 10px;
        left: 10px;
    }

    .like-icon {
        font-size: 24px;
        cursor: pointer;
        color: gray;
        transition: color 0.3s ease;
    }

        .like-icon.liked {
            color: red;
        }

    /* Styles for filter buttons */
    .btn-group {
        display: flex;
        gap: 10px;
        justify-content: center; /* Center buttons horizontally */
    }

    .btn {
        border-radius: 0; /* Ensure buttons are square-edged */
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var cards = document.querySelectorAll('.card-wrapper');
        var showActiveButton = document.getElementById('show-active');
        var showInactiveButton = document.getElementById('show-inactive');
        var showPendingButton = document.getElementById('show-pending');
        var showAllButton = document.getElementById('show-all');

        function filterCards(status) {
            cards.forEach(function (cardWrapper) {
                var cardStatus = cardWrapper.getAttribute('data-status');

                if (status === 'All' || cardStatus === status) {
                    cardWrapper.style.display = 'block';
                } else {
                    cardWrapper.style.display = 'none';
                }
            });
        }

        showActiveButton.addEventListener('click', function () {
            filterCards('Active');
        });

        showInactiveButton.addEventListener('click', function () {
            filterCards('Inactive');
        });

        showPendingButton.addEventListener('click', function () {
            filterCards('Pending');
        });

        showAllButton.addEventListener('click', function () {
            filterCards('All');
        });

        // Initial display setup
        filterCards('All');

        // Event listener for like icons
        var likeIcons = document.querySelectorAll('.like-icon');

        likeIcons.forEach(function (icon) {
            icon.addEventListener('click', function () {
                var auctionId = this.getAttribute('data-auction-id');
                var isLiked = this.classList.contains('liked');

                // Toggle like state
                if (isLiked) {
                    this.classList.remove('liked');
                } else {
                    this.classList.add('liked');
                }

                // Update color
                this.style.color = isLiked ? 'gray' : 'red';

                // Send an AJAX request to save the like state to the server
                fetch('/like/auction', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ auctionId: auctionId, liked: !isLiked }),
                })
                    .then(response => response.json())
                    .then(data => {
                        // Handle response data if necessary
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });
        });

        var statusBubbles = document.querySelectorAll('.status-bubble');
        cards.forEach(function (cardWrapper) {
            var cardStatus = cardWrapper.getAttribute('data-status');
            var statusBubble = cardWrapper.querySelector('.status-bubble');

            switch (cardStatus) {
                case 'Active':
                    statusBubble.classList.add('status-open');
                    statusBubble.textContent = 'Active';
                    break;
                case 'Inactive':
                    statusBubble.classList.add('status-closed');
                    statusBubble.textContent = 'Inactive';
                    break;
                case 'Pending':
                    statusBubble.classList.add('status-pending');
                    statusBubble.textContent = 'Pending';
                    break;
                default:
                    statusBubble.classList.add('status-default');
                    statusBubble.textContent = 'Unknown';
                    break;
            }
        });

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/hub")
            .build();

        connection.start()
            .catch(err => console.error("Error establishing connection: ", err.toString()));

        function updateTimer() {
            cards.forEach(function (cardWrapper) {
                var auctionId = cardWrapper.querySelector('.like-icon').getAttribute('data-auction-id');
                var endDate = new Date(cardWrapper.getAttribute('data-enddate'));
                var startDate = new Date(cardWrapper.getAttribute('data-startdate'));
                var now = new Date();
                var timeToStart = startDate - now;
                var timeRemaining = endDate - now;

                var statusBubble = cardWrapper.querySelector('.status-bubble');
                var currentStatus = cardWrapper.getAttribute('data-status'); // Pobierz bieżący status

                // Sprawdź, czy aukcja już jest zakończona
                if (currentStatus === 'Inactive') {
                    return; // Jeśli aukcja jest zakończona, nie zmieniaj jej statusu
                }

                if (timeToStart > 0) {
                    // Aukcja jeszcze się nie rozpoczęła
                    var daysToStart = Math.floor(timeToStart / (1000 * 60 * 60 * 24));
                    var hoursToStart = Math.floor((timeToStart % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    var minutesToStart = Math.floor((timeToStart % (1000 * 60 * 60)) / (1000 * 60));
                    var secondsToStart = Math.floor((timeToStart % (1000 * 60)) / 1000);

                    cardWrapper.querySelector('.card-time').textContent =
                        `Auction starts in: ${daysToStart}d ${hoursToStart}h ${minutesToStart}m ${secondsToStart}s`;

                    // Zaktualizuj status na "Pending"
                    cardWrapper.setAttribute('data-status', 'Pending');
                    statusBubble.className = 'status-bubble status-pending';
                    statusBubble.textContent = 'Pending';

                } else if (timeRemaining > 0) {
                    // Aukcja jest aktywna
                    var days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));
                    var hours = Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    var minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
                    var seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);

                    cardWrapper.querySelector('.card-time').textContent =
                        `Time left: ${days}d ${hours}h ${minutes}m ${seconds}s`;

                    // Zaktualizuj status na "Active"
                    cardWrapper.setAttribute('data-status', 'Active');
                    statusBubble.className = 'status-bubble status-open';
                    statusBubble.textContent = 'Active';


                    if (auctionId) {
                        connection.invoke("SetActiveItemsInAuction", parseInt(auctionId, 10))
                            .catch(err => console.error("Error to set active items: ", err.toString()));
                    }

                } else {
                    cardWrapper.setAttribute('data-status', 'Inactive');
                    statusBubble.className = 'status-bubble status-closed';
                    connection.invoke("SetInactiveItemsInAuctionWithoutBids", parseInt(auctionId, 10))
                        .catch(err => console.error("Error to set inactive items: ", err.toString()));
                    statusBubble.textContent = 'Inactive'; // Dodanie komunikatu "Auction Ended"
                }
            });
        }


        setInterval(updateTimer, 1000);

    });
</script>
