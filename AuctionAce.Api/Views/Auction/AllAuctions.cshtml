@using AuctionAce.Api.Models.ViewModels.Auctions
@model AuctionViewModel
@{
    string userIdString = Context.Session.GetString("UserId");
    int userId = 0;
    if (!string.IsNullOrEmpty(userIdString) && int.TryParse(userIdString, out userId))
    {
        Layout = "~/Views/Shared/_LayoutLogged.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_LayoutUnlogged.cshtml";
    }
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12 mb-3">
            <div class="btn-group" role="group">
                <button id="show-active" class="btn btn-success">Show Active</button>
                <button id="show-inactive" class="btn btn-danger">Show Inactive</button>
                <button id="show-pending" class="btn btn-secondary">Show Pending</button>
                <button id="show-all" class="btn btn-light">Show All</button>
            </div>
        </div>
    </div>

    <div class="row" id="auction-container">
        @if (Model.AuctionStatus != null)
        {
            foreach (var item in Model.AuctionStatus)
            {
                <div class="col-md-3 mb-4 card-wrapper" data-status="@item.Status">
                    <div class="card position-relative">
                        <img class="card-img-top" src="https://studentprawa.pl/media/k2/items/cache/af6038056f6231c664e3ef073c45af10_L.jpg" alt="Card image cap">
                        <div class="card-body">
                            <h5 class="card-title">@item.AuctionName</h5>
                            <p class="card-text">@item.Description</p>
                            <a href="@Url.Action("AuctionItemList", "Auction", new { auctionId = item.Id })" class="btn btn-primary">View Auction</a>
                        </div>
                        <div class="like-container">
                            <span class="like-icon" data-auction-id="@item.Id">&#9829;</span> <!-- Serduszko -->
                        </div>
                        <div class="status-bubble">
                            @* Status will be added dynamically *@
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <div class="row mt-3">
        <div class="col-md-12 text-center">
            <button onclick="window.location.href = '@Url.Action("AllAuctions","Home")'" type="button" class="btn btn-primary btn-lg">See More</button>
        </div>
    </div>
</div>

<style>
    .position-relative {
        position: relative;
    }

    .card-wrapper {
        display: block; /* Ensure all cards are visible by default */
    }

    .status-bubble {
        position: absolute;
        top: 10px;
        right: 10px;
        padding: 8px 12px;
        border-radius: 12px;
        color: white;
        font-weight: bold;
        text-align: center;
        font-size: 0.9rem;
        background: rgba(0, 0, 0, 0.7);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: background 0.3s ease;
    }

    .status-open {
        background-color: #28a745; /* Green */
    }

    .status-closed {
        background-color: #dc3545; /* Red */
    }

    .status-pending {
        background-color: #6c757d; /* Gray */
    }

    .status-default {
        background-color: #007bff; /* Blue */
    }

    .like-container {
        position: absolute;
        top: 10px;
        left: 10px;
    }

    .like-icon {
        font-size: 24px;
        cursor: pointer;
        color: gray;
        transition: color 0.3s ease;
    }

        .like-icon.liked {
            color: red;
        }

    /* Styles for filter buttons */
    .btn-group {
        display: flex;
        gap: 10px;
        justify-content: center; /* Center buttons horizontally */
    }

    .btn {
        border-radius: 0; /* Ensure buttons are square-edged */
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var cards = document.querySelectorAll('.card-wrapper');
        var showActiveButton = document.getElementById('show-active');
        var showInactiveButton = document.getElementById('show-inactive');
        var showPendingButton = document.getElementById('show-pending');
        var showAllButton = document.getElementById('show-all');

        function filterCards(status) {
            cards.forEach(function (cardWrapper) {
                var cardStatus = cardWrapper.getAttribute('data-status');

                if (status === 'All' || cardStatus === status) {
                    cardWrapper.style.display = 'block';
                } else {
                    cardWrapper.style.display = 'none';
                }
            });
        }

        showActiveButton.addEventListener('click', function () {
            filterCards('Active');
        });

        showInactiveButton.addEventListener('click', function () {
            filterCards('Inactive');
        });

        showPendingButton.addEventListener('click', function () {
            filterCards('Pending');
        });

        showAllButton.addEventListener('click', function () {
            filterCards('All');
        });

        // Initial display setup
        filterCards('All');

        // Event listener for like icons
        var likeIcons = document.querySelectorAll('.like-icon');

        likeIcons.forEach(function (icon) {
            icon.addEventListener('click', function () {
                var auctionId = this.getAttribute('data-auction-id');
                var isLiked = this.classList.contains('liked');

                // Toggle like state
                if (isLiked) {
                    this.classList.remove('liked');
                } else {
                    this.classList.add('liked');
                }

                // Update color
                this.style.color = isLiked ? 'gray' : 'red';

                // Send an AJAX request to save the like state to the server
                fetch('/like/auction', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ auctionId: auctionId, liked: !isLiked }),
                })
                    .then(response => response.json())
                    .then(data => {
                        // Handle response data if necessary
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });
        });

        // Add status bubble to each card
        var statusBubbles = document.querySelectorAll('.status-bubble');
        cards.forEach(function (cardWrapper) {
            var cardStatus = cardWrapper.getAttribute('data-status');
            var statusBubble = cardWrapper.querySelector('.status-bubble');

            switch (cardStatus) {
                case 'Active':
                    statusBubble.classList.add('status-open');
                    statusBubble.textContent = 'Active';
                    break;
                case 'Inactive':
                    statusBubble.classList.add('status-closed');
                    statusBubble.textContent = 'Inactive';
                    break;
                case 'Pending':
                    statusBubble.classList.add('status-pending');
                    statusBubble.textContent = 'Pending';
                    break;
            }
        });
    });
</script>
